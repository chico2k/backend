###########
# BUILDER #
###########

# pull official base image
FROM python:3.8.0-alpine as builder

# set work directory
WORKDIR /usr/src/app

# ENV
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Install Dependencies
RUN apk add --update --no-cache \
    postgresql-client \
    jpeg-dev gettext \
    libmagic

# Install Temp Dependencies
RUN apk add --update --no-cache --virtual .tmp-build-deps \
    gcc \
    libc-dev \
    linux-headers\
    postgresql-dev \
    musl-dev \
    zlib \
    zlib-dev


# install dependencies
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

# Remove Temp Dependencies
RUN apk del .tmp-build-deps

#########
# FINAL #
#########

# pull official base image
FROM python:3.8.0-alpine

# ENV
ENV APP_HOME=/home/app/
ENV ENTRYPOINT=entrypoint.staging.sh

# create directory for the app user
RUN mkdir -p $APP_HOME

# Create dictionary for Static
RUN mkdir $APP_HOME/staticfiles

# create the app user
RUN addgroup -S app && adduser -S app -G app

# set work directory
WORKDIR $APP_HOME

# Install Dependencies
RUN apk add --update --no-cache \
    postgresql-client \
    jpeg-dev gettext \
    libmagic

# Install Temp Dependencies
RUN apk add --update --no-cache --virtual .tmp-build-deps \
    gcc \
    libc-dev \
    linux-headers\
    postgresql-dev \
    musl-dev \
    zlib \
    zlib-dev \
    libpq

# Install dependencies
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --upgrade pip
RUN pip install --no-cache /wheels/*

# Remove Temp Dependencies
RUN apk del .tmp-build-deps

# copy project 
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# Permission Entry point
RUN chmod 755 /$APP_HOME/config/$ENTRYPOINT
RUN chmod +x /$APP_HOME/config/$ENTRYPOINT

# Expose Port
EXPOSE 8000

# run entrypoint.staging.sh
ENTRYPOINT ["/home/app/config/entrypoint.staging.sh"]